import subprocess
from pathlib import Path
import re
import tempfile


INSTANTIATE = """
"""

TEMPLATE = """
// This file is automatically generated
#include "kernels/kernel_{VERSION}.cuh"
#include <cuda_bf16.h>
#include <cuda_fp16.h>

#ifdef HOGDILD_ENABLE_FLOAT
template cudaError_t {VERSION}::hogwild_attention_gpu<float>(
    float* out, float scale,
    const int* locations, const float* queries,
    const int* fragment_lengths,
    const float** key_fragments,
    const float** value_fragments,
    Shape shape
);
#endif

#ifdef HOGDILD_ENABLE_HALF
template cudaError_t {VERSION}::hogwild_attention_gpu<half>(
    half* out, float scale,
    const int* locations, const half* queries,
    const int* fragment_lengths,
    const half** key_fragments,
    const half** value_fragments,
    Shape shape
);
#endif

#ifdef HOGDILD_ENABLE_BFLOAT
template cudaError_t {VERSION}::hogwild_attention_gpu<nv_bfloat16>(
    nv_bfloat16* out, float scale,
    const int* locations, const nv_bfloat16* queries,
    const int* fragment_lengths,
    const nv_bfloat16** key_fragments,
    const nv_bfloat16** value_fragments,
    Shape shape
);
#endif

"""


# https://stackoverflow.com/questions/5967500/how-to-correctly-sort-a-string-with-a-number-inside
def natural_keys(text):
    """
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    (See Toothy's implementation in the comments)
    """
    return [int(c) if c.isdigit() else c for c in re.split(r'(\d+)', text)]


CMAKE_FILE_TEMPLATE = "SET(HOGWILD_KERNEL_INSTANTIATIONS {SOURCES})"

cmake_list = []
version_list = []
kernels_path = Path("kernels")
for file in kernels_path.glob("kernel_v*.cuh"):
    target = f"tpl/{file.relative_to(kernels_path).with_suffix('.cu')}"
    version = file.stem[7:]
    version_list.append(version)
    src_code = TEMPLATE.format(VERSION=version)
    if Path(target).read_text() != src_code:
        Path(target).write_text(src_code)
    cmake_list.append(target)

version_list = sorted(version_list, key=natural_keys)

with open("tpl/CMakeLists.txt", "w") as cml:
    cml.write("SET(HOGWILD_KERNEL_INSTANTIATIONS\n")
    for entry in sorted(cmake_list, key=natural_keys):
        cml.write(f'    "src/{entry}"\n')
    cml.write("    PARENT_SCOPE\n)\n")


# generate the big dispatch function
def make_kernel_dispatch(versions):
    macro = """
    #define DECL_KERNEL(ns)
    namespace ns {
    template<class scalar_t>
cudaError_t hogwild_attention_gpu(
        scalar_t* out, float scale,
        const int* locations, const scalar_t* queries,
        const int* fragment_lengths,
        const scalar_t** key_fragments,
        const scalar_t** value_fragments,
        Shape shape);}
    """
    macro = macro.replace("\n", "\\\n")

    sig = """
template<class scalar_t>
cudaError_t hogwild_attention_gpu_dispatch(
        scalar_t* out, float scale,
        const int* locations, const scalar_t* queries,
        const int* fragment_lengths,
        const scalar_t** key_fragments,
        const scalar_t** value_fragments,
        const Shape& shape, const std::string& version)
    """
    declarations = ""
    switch = ""
    for version in versions:
        declarations += f"DECL_KERNEL({version})\n"

        if switch != "":
            switch += "else "
        switch += f'if(version == "{version}") {{\n'
        switch += f'return {version}::hogwild_attention_gpu(out, scale, locations, queries, fragment_lengths, key_fragments, value_fragments, shape);\n}}\n'
    src = '// This file is automatically generated.\n// Do not edit by hand!\n\n#pragma once\n\n#include "common.h"\n#include <cstdio>\n#include <string>\n#include <array>\n\n'
    src += macro + "\n" + declarations + "#undef DECL_KERNEL\n\n"
    src += sig + "{\n" + switch + ' else { fprintf(stderr, "Invalid kernel version `%s`!", version.c_str()); std::exit(1); }\n}'

    src += f"constexpr const int NUM_KERNEL_VERSIONS = {len(versions)};\n"
    src += "const std::array<std::string, NUM_KERNEL_VERSIONS>& get_all_versions() {\n"
    src += "   static std::array<std::string, NUM_KERNEL_VERSIONS> versions = {\n"
    src += ",".join([f'"{v}"' for v in versions])
    src += "}; return versions;}\n"

    with tempfile.NamedTemporaryFile() as tmp:
        Path(tmp.name).write_text(src)
        subprocess.run(["clang-format", "-i", tmp.name])
        src = Path(tmp.name).read_text()
    return src


print(version_list)
Path("dispatch.h").write_text(make_kernel_dispatch(version_list))
